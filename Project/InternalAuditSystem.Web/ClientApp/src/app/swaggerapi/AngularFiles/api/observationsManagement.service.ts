/**
 * My Title
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ObservationAC } from '../model/observationAC';
import { ObservationUploadAC } from '../model/observationUploadAC';
import { PaginationOfObservationAC } from '../model/paginationOfObservationAC';
import { ProblemDetails } from '../model/problemDetails';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ObservationsManagementService {

    protected basePath = 'http://localhost:5000/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param tableId 
     * @param observationId 
     * @param entityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public observationsManagementAddColumnInTable(tableId?: string, observationId?: string, entityId?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public observationsManagementAddColumnInTable(tableId?: string, observationId?: string, entityId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public observationsManagementAddColumnInTable(tableId?: string, observationId?: string, entityId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public observationsManagementAddColumnInTable(tableId?: string, observationId?: string, entityId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (tableId !== undefined && tableId !== null) {
            queryParameters = queryParameters.set('tableId', <any>tableId);
        }
        if (observationId !== undefined && observationId !== null) {
            queryParameters = queryParameters.set('observationId', <any>observationId);
        }
        if (entityId !== undefined && entityId !== null) {
            queryParameters = queryParameters.set('entityId', <any>entityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<string>('put',`${this.basePath}/api/ObservationsManagement/json-documents`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param entityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public observationsManagementAddObservation(body: ObservationAC, entityId?: string, observe?: 'body', reportProgress?: boolean): Observable<ObservationAC>;
    public observationsManagementAddObservation(body: ObservationAC, entityId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ObservationAC>>;
    public observationsManagementAddObservation(body: ObservationAC, entityId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ObservationAC>>;
    public observationsManagementAddObservation(body: ObservationAC, entityId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling observationsManagementAddObservation.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (entityId !== undefined && entityId !== null) {
            queryParameters = queryParameters.set('entityId', <any>entityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ObservationAC>('post',`${this.basePath}/api/ObservationsManagement`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param tableId 
     * @param observationId 
     * @param entityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public observationsManagementAddRow(tableId?: string, observationId?: string, entityId?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public observationsManagementAddRow(tableId?: string, observationId?: string, entityId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public observationsManagementAddRow(tableId?: string, observationId?: string, entityId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public observationsManagementAddRow(tableId?: string, observationId?: string, entityId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (tableId !== undefined && tableId !== null) {
            queryParameters = queryParameters.set('tableId', <any>tableId);
        }
        if (observationId !== undefined && observationId !== null) {
            queryParameters = queryParameters.set('observationId', <any>observationId);
        }
        if (entityId !== undefined && entityId !== null) {
            queryParameters = queryParameters.set('entityId', <any>entityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<string>('put',`${this.basePath}/api/ObservationsManagement/json-documents/rows`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observationId 
     * @param tableId 
     * @param columnPosition 
     * @param entityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public observationsManagementDeleteColumn(observationId?: string, tableId?: string, columnPosition?: number, entityId?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public observationsManagementDeleteColumn(observationId?: string, tableId?: string, columnPosition?: number, entityId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public observationsManagementDeleteColumn(observationId?: string, tableId?: string, columnPosition?: number, entityId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public observationsManagementDeleteColumn(observationId?: string, tableId?: string, columnPosition?: number, entityId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (observationId !== undefined && observationId !== null) {
            queryParameters = queryParameters.set('observationId', <any>observationId);
        }
        if (tableId !== undefined && tableId !== null) {
            queryParameters = queryParameters.set('tableId', <any>tableId);
        }
        if (columnPosition !== undefined && columnPosition !== null) {
            queryParameters = queryParameters.set('columnPosition', <any>columnPosition);
        }
        if (entityId !== undefined && entityId !== null) {
            queryParameters = queryParameters.set('entityId', <any>entityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<string>('put',`${this.basePath}/api/ObservationsManagement/json-documents/columns/id`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param entityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public observationsManagementDeleteObservation(id: string, entityId?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public observationsManagementDeleteObservation(id: string, entityId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public observationsManagementDeleteObservation(id: string, entityId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public observationsManagementDeleteObservation(id: string, entityId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling observationsManagementDeleteObservation.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (entityId !== undefined && entityId !== null) {
            queryParameters = queryParameters.set('entityId', <any>entityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/api/ObservationsManagement/${encodeURIComponent(String(id))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param entityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public observationsManagementDeleteObservationDocument(id: string, entityId?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public observationsManagementDeleteObservationDocument(id: string, entityId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public observationsManagementDeleteObservationDocument(id: string, entityId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public observationsManagementDeleteObservationDocument(id: string, entityId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling observationsManagementDeleteObservationDocument.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (entityId !== undefined && entityId !== null) {
            queryParameters = queryParameters.set('entityId', <any>entityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/api/ObservationsManagement/file/${encodeURIComponent(String(id))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observationId 
     * @param tableId 
     * @param rowId 
     * @param entityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public observationsManagementDeleteRow(observationId?: string, tableId?: string, rowId?: string, entityId?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public observationsManagementDeleteRow(observationId?: string, tableId?: string, rowId?: string, entityId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public observationsManagementDeleteRow(observationId?: string, tableId?: string, rowId?: string, entityId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public observationsManagementDeleteRow(observationId?: string, tableId?: string, rowId?: string, entityId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (observationId !== undefined && observationId !== null) {
            queryParameters = queryParameters.set('observationId', <any>observationId);
        }
        if (tableId !== undefined && tableId !== null) {
            queryParameters = queryParameters.set('tableId', <any>tableId);
        }
        if (rowId !== undefined && rowId !== null) {
            queryParameters = queryParameters.set('rowId', <any>rowId);
        }
        if (entityId !== undefined && entityId !== null) {
            queryParameters = queryParameters.set('entityId', <any>entityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<string>('put',`${this.basePath}/api/ObservationsManagement/json-documents/rows/id`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param entityId 
     * @param timeOffset 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public observationsManagementExportObservations(entityId?: string, timeOffset?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public observationsManagementExportObservations(entityId?: string, timeOffset?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public observationsManagementExportObservations(entityId?: string, timeOffset?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public observationsManagementExportObservations(entityId?: string, timeOffset?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (entityId !== undefined && entityId !== null) {
            queryParameters = queryParameters.set('entityId', <any>entityId);
        }
        if (timeOffset !== undefined && timeOffset !== null) {
            queryParameters = queryParameters.set('timeOffset', <any>timeOffset);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/api/ObservationsManagement/exportObservations`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param entityId 
     * @param timeOffset 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public observationsManagementGenerateObservationPPT(id?: string, entityId?: string, timeOffset?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public observationsManagementGenerateObservationPPT(id?: string, entityId?: string, timeOffset?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public observationsManagementGenerateObservationPPT(id?: string, entityId?: string, timeOffset?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public observationsManagementGenerateObservationPPT(id?: string, entityId?: string, timeOffset?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }
        if (entityId !== undefined && entityId !== null) {
            queryParameters = queryParameters.set('entityId', <any>entityId);
        }
        if (timeOffset !== undefined && timeOffset !== null) {
            queryParameters = queryParameters.set('timeOffset', <any>timeOffset);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/api/ObservationsManagement/generateObservationPPT`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param pageIndex 
     * @param pageSize 
     * @param searchString 
     * @param entityId 
     * @param fromYear 
     * @param toYear 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public observationsManagementGetAllObservations(pageIndex?: number, pageSize?: number, searchString?: string, entityId?: string, fromYear?: number, toYear?: number, observe?: 'body', reportProgress?: boolean): Observable<PaginationOfObservationAC>;
    public observationsManagementGetAllObservations(pageIndex?: number, pageSize?: number, searchString?: string, entityId?: string, fromYear?: number, toYear?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PaginationOfObservationAC>>;
    public observationsManagementGetAllObservations(pageIndex?: number, pageSize?: number, searchString?: string, entityId?: string, fromYear?: number, toYear?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PaginationOfObservationAC>>;
    public observationsManagementGetAllObservations(pageIndex?: number, pageSize?: number, searchString?: string, entityId?: string, fromYear?: number, toYear?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {







        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageIndex !== undefined && pageIndex !== null) {
            queryParameters = queryParameters.set('pageIndex', <any>pageIndex);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (searchString !== undefined && searchString !== null) {
            queryParameters = queryParameters.set('searchString', <any>searchString);
        }
        if (entityId !== undefined && entityId !== null) {
            queryParameters = queryParameters.set('entityId', <any>entityId);
        }
        if (fromYear !== undefined && fromYear !== null) {
            queryParameters = queryParameters.set('fromYear', <any>fromYear);
        }
        if (toYear !== undefined && toYear !== null) {
            queryParameters = queryParameters.set('toYear', <any>toYear);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<PaginationOfObservationAC>('get',`${this.basePath}/api/ObservationsManagement/getObservations`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observationId 
     * @param entityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public observationsManagementGetObservationDetailsById(observationId?: string, entityId?: string, observe?: 'body', reportProgress?: boolean): Observable<ObservationAC>;
    public observationsManagementGetObservationDetailsById(observationId?: string, entityId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ObservationAC>>;
    public observationsManagementGetObservationDetailsById(observationId?: string, entityId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ObservationAC>>;
    public observationsManagementGetObservationDetailsById(observationId?: string, entityId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (observationId !== undefined && observationId !== null) {
            queryParameters = queryParameters.set('observationId', <any>observationId);
        }
        if (entityId !== undefined && entityId !== null) {
            queryParameters = queryParameters.set('entityId', <any>entityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ObservationAC>('get',`${this.basePath}/api/ObservationsManagement`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param entityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public observationsManagementGetObservationDocumentDownloadUrl(id: string, entityId?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public observationsManagementGetObservationDocumentDownloadUrl(id: string, entityId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public observationsManagementGetObservationDocumentDownloadUrl(id: string, entityId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public observationsManagementGetObservationDocumentDownloadUrl(id: string, entityId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling observationsManagementGetObservationDocumentDownloadUrl.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (entityId !== undefined && entityId !== null) {
            queryParameters = queryParameters.set('entityId', <any>entityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<string>('get',`${this.basePath}/api/ObservationsManagement/file/${encodeURIComponent(String(id))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param entityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public observationsManagementGetObservationTable(id?: string, entityId?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public observationsManagementGetObservationTable(id?: string, entityId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public observationsManagementGetObservationTable(id?: string, entityId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public observationsManagementGetObservationTable(id?: string, entityId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }
        if (entityId !== undefined && entityId !== null) {
            queryParameters = queryParameters.set('entityId', <any>entityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<string>('get',`${this.basePath}/api/ObservationsManagement/json-documents`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param selectedEntityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public observationsManagementGetObservationUploadDetail(selectedEntityId?: string, observe?: 'body', reportProgress?: boolean): Observable<ObservationUploadAC>;
    public observationsManagementGetObservationUploadDetail(selectedEntityId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ObservationUploadAC>>;
    public observationsManagementGetObservationUploadDetail(selectedEntityId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ObservationUploadAC>>;
    public observationsManagementGetObservationUploadDetail(selectedEntityId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (selectedEntityId !== undefined && selectedEntityId !== null) {
            queryParameters = queryParameters.set('selectedEntityId', <any>selectedEntityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ObservationUploadAC>('get',`${this.basePath}/api/ObservationsManagement/bulkUploadData`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param jsonDocument 
     * @param observationId 
     * @param tableId 
     * @param entityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public observationsManagementUpdateJsonDocument(jsonDocument?: string, observationId?: string, tableId?: string, entityId?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public observationsManagementUpdateJsonDocument(jsonDocument?: string, observationId?: string, tableId?: string, entityId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public observationsManagementUpdateJsonDocument(jsonDocument?: string, observationId?: string, tableId?: string, entityId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public observationsManagementUpdateJsonDocument(jsonDocument?: string, observationId?: string, tableId?: string, entityId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (jsonDocument !== undefined && jsonDocument !== null) {
            queryParameters = queryParameters.set('jsonDocument', <any>jsonDocument);
        }
        if (observationId !== undefined && observationId !== null) {
            queryParameters = queryParameters.set('observationId', <any>observationId);
        }
        if (tableId !== undefined && tableId !== null) {
            queryParameters = queryParameters.set('tableId', <any>tableId);
        }
        if (entityId !== undefined && entityId !== null) {
            queryParameters = queryParameters.set('entityId', <any>entityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<string>('put',`${this.basePath}/api/ObservationsManagement/json-documents/update`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param entityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public observationsManagementUpdateObservation(body: ObservationAC, entityId?: string, observe?: 'body', reportProgress?: boolean): Observable<ObservationAC>;
    public observationsManagementUpdateObservation(body: ObservationAC, entityId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ObservationAC>>;
    public observationsManagementUpdateObservation(body: ObservationAC, entityId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ObservationAC>>;
    public observationsManagementUpdateObservation(body: ObservationAC, entityId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling observationsManagementUpdateObservation.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (entityId !== undefined && entityId !== null) {
            queryParameters = queryParameters.set('entityId', <any>entityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ObservationAC>('put',`${this.basePath}/api/ObservationsManagement`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
