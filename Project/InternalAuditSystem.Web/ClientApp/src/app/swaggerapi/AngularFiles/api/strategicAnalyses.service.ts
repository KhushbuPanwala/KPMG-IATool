/**
 * My Title
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { PaginationOfStrategicAnalysisAC } from '../model/paginationOfStrategicAnalysisAC';
import { PaginationOfUserWiseResponseAC } from '../model/paginationOfUserWiseResponseAC';
import { ProblemDetails } from '../model/problemDetails';
import { QuestionAC } from '../model/questionAC';
import { StrategicAnalysisAC } from '../model/strategicAnalysisAC';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class StrategicAnalysesService {

    protected basePath = 'http://localhost:5000/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param body 
     * @param strategicAnalysisId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public strategicAnalysesAddQuestion(body: QuestionAC, strategicAnalysisId?: string, observe?: 'body', reportProgress?: boolean): Observable<QuestionAC>;
    public strategicAnalysesAddQuestion(body: QuestionAC, strategicAnalysisId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<QuestionAC>>;
    public strategicAnalysesAddQuestion(body: QuestionAC, strategicAnalysisId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<QuestionAC>>;
    public strategicAnalysesAddQuestion(body: QuestionAC, strategicAnalysisId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling strategicAnalysesAddQuestion.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (strategicAnalysisId !== undefined && strategicAnalysisId !== null) {
            queryParameters = queryParameters.set('strategicAnalysisId', <any>strategicAnalysisId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<QuestionAC>('post',`${this.basePath}/api/StrategicAnalyses/question`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public strategicAnalysesAddStrategicAnalysis(body: StrategicAnalysisAC, observe?: 'body', reportProgress?: boolean): Observable<StrategicAnalysisAC>;
    public strategicAnalysesAddStrategicAnalysis(body: StrategicAnalysisAC, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StrategicAnalysisAC>>;
    public strategicAnalysesAddStrategicAnalysis(body: StrategicAnalysisAC, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StrategicAnalysisAC>>;
    public strategicAnalysesAddStrategicAnalysis(body: StrategicAnalysisAC, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling strategicAnalysesAddStrategicAnalysis.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<StrategicAnalysisAC>('post',`${this.basePath}/api/StrategicAnalyses`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public strategicAnalysesDeleteFile(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public strategicAnalysesDeleteFile(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public strategicAnalysesDeleteFile(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public strategicAnalysesDeleteFile(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling strategicAnalysesDeleteFile.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/api/StrategicAnalyses/files/strategicAnalysesDocuments/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param questionId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public strategicAnalysesDeleteQuestionById(questionId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public strategicAnalysesDeleteQuestionById(questionId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public strategicAnalysesDeleteQuestionById(questionId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public strategicAnalysesDeleteQuestionById(questionId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (questionId === null || questionId === undefined) {
            throw new Error('Required parameter questionId was null or undefined when calling strategicAnalysesDeleteQuestionById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/api/StrategicAnalyses/questions/${encodeURIComponent(String(questionId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public strategicAnalysesDeleteStrategicAnalysis(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public strategicAnalysesDeleteStrategicAnalysis(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public strategicAnalysesDeleteStrategicAnalysis(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public strategicAnalysesDeleteStrategicAnalysis(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling strategicAnalysesDeleteStrategicAnalysis.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/api/StrategicAnalyses/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param teamMemberId 
     * @param strategicAnalysisId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public strategicAnalysesDeleteStrategicAnalysisTeamMember(teamMemberId: string, strategicAnalysisId?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public strategicAnalysesDeleteStrategicAnalysisTeamMember(teamMemberId: string, strategicAnalysisId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public strategicAnalysesDeleteStrategicAnalysisTeamMember(teamMemberId: string, strategicAnalysisId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public strategicAnalysesDeleteStrategicAnalysisTeamMember(teamMemberId: string, strategicAnalysisId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (teamMemberId === null || teamMemberId === undefined) {
            throw new Error('Required parameter teamMemberId was null or undefined when calling strategicAnalysesDeleteStrategicAnalysisTeamMember.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (strategicAnalysisId !== undefined && strategicAnalysisId !== null) {
            queryParameters = queryParameters.set('strategicAnalysisId', <any>strategicAnalysisId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/api/StrategicAnalyses/teamMembers/${encodeURIComponent(String(teamMemberId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param strategicId 
     * @param offset 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public strategicAnalysesDownloadStrategicPDF(strategicId?: string, offset?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public strategicAnalysesDownloadStrategicPDF(strategicId?: string, offset?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public strategicAnalysesDownloadStrategicPDF(strategicId?: string, offset?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public strategicAnalysesDownloadStrategicPDF(strategicId?: string, offset?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (strategicId !== undefined && strategicId !== null) {
            queryParameters = queryParameters.set('strategicId', <any>strategicId);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/api/StrategicAnalyses/downloadStrategicPDF`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public strategicAnalysesGetAllActiveStrategicAnalysis(observe?: 'body', reportProgress?: boolean): Observable<Array<StrategicAnalysisAC>>;
    public strategicAnalysesGetAllActiveStrategicAnalysis(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<StrategicAnalysisAC>>>;
    public strategicAnalysesGetAllActiveStrategicAnalysis(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<StrategicAnalysisAC>>>;
    public strategicAnalysesGetAllActiveStrategicAnalysis(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<StrategicAnalysisAC>>('get',`${this.basePath}/api/StrategicAnalyses/getAllActiveStrategy`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param page 
     * @param pageSize 
     * @param searchString 
     * @param isSampling 
     * @param rcmId 
     * @param isCallFromAdmin 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public strategicAnalysesGetAllStrategicAnalyses(page?: number, pageSize?: number, searchString?: string, isSampling?: boolean, rcmId?: string, isCallFromAdmin?: boolean, observe?: 'body', reportProgress?: boolean): Observable<PaginationOfStrategicAnalysisAC>;
    public strategicAnalysesGetAllStrategicAnalyses(page?: number, pageSize?: number, searchString?: string, isSampling?: boolean, rcmId?: string, isCallFromAdmin?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PaginationOfStrategicAnalysisAC>>;
    public strategicAnalysesGetAllStrategicAnalyses(page?: number, pageSize?: number, searchString?: string, isSampling?: boolean, rcmId?: string, isCallFromAdmin?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PaginationOfStrategicAnalysisAC>>;
    public strategicAnalysesGetAllStrategicAnalyses(page?: number, pageSize?: number, searchString?: string, isSampling?: boolean, rcmId?: string, isCallFromAdmin?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {







        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (searchString !== undefined && searchString !== null) {
            queryParameters = queryParameters.set('searchString', <any>searchString);
        }
        if (isSampling !== undefined && isSampling !== null) {
            queryParameters = queryParameters.set('isSampling', <any>isSampling);
        }
        if (rcmId !== undefined && rcmId !== null) {
            queryParameters = queryParameters.set('rcmId', <any>rcmId);
        }
        if (isCallFromAdmin !== undefined && isCallFromAdmin !== null) {
            queryParameters = queryParameters.set('isCallFromAdmin', <any>isCallFromAdmin);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<PaginationOfStrategicAnalysisAC>('get',`${this.basePath}/api/StrategicAnalyses`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public strategicAnalysesGetDocumentDownloadUrl(id: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public strategicAnalysesGetDocumentDownloadUrl(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public strategicAnalysesGetDocumentDownloadUrl(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public strategicAnalysesGetDocumentDownloadUrl(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling strategicAnalysesGetDocumentDownloadUrl.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<string>('get',`${this.basePath}/api/StrategicAnalyses/files/urls/strategicAnalysesDocuments/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param strategyAnalysisId 
     * @param entityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public strategicAnalysesGetEmailAttachmentDocuments(strategyAnalysisId?: string, entityId?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public strategicAnalysesGetEmailAttachmentDocuments(strategyAnalysisId?: string, entityId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public strategicAnalysesGetEmailAttachmentDocuments(strategyAnalysisId?: string, entityId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public strategicAnalysesGetEmailAttachmentDocuments(strategyAnalysisId?: string, entityId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (strategyAnalysisId !== undefined && strategyAnalysisId !== null) {
            queryParameters = queryParameters.set('strategyAnalysisId', <any>strategyAnalysisId);
        }
        if (entityId !== undefined && entityId !== null) {
            queryParameters = queryParameters.set('entityId', <any>entityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<string>('get',`${this.basePath}/api/StrategicAnalyses/email-attachments`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public strategicAnalysesGetQuestionById(id: string, observe?: 'body', reportProgress?: boolean): Observable<QuestionAC>;
    public strategicAnalysesGetQuestionById(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<QuestionAC>>;
    public strategicAnalysesGetQuestionById(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<QuestionAC>>;
    public strategicAnalysesGetQuestionById(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling strategicAnalysesGetQuestionById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<QuestionAC>('get',`${this.basePath}/api/StrategicAnalyses/questions/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param strategicAnalysisId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public strategicAnalysesGetQuestions(strategicAnalysisId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<QuestionAC>>;
    public strategicAnalysesGetQuestions(strategicAnalysisId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<QuestionAC>>>;
    public strategicAnalysesGetQuestions(strategicAnalysisId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<QuestionAC>>>;
    public strategicAnalysesGetQuestions(strategicAnalysisId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (strategicAnalysisId === null || strategicAnalysisId === undefined) {
            throw new Error('Required parameter strategicAnalysisId was null or undefined when calling strategicAnalysesGetQuestions.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<QuestionAC>>('get',`${this.basePath}/api/StrategicAnalyses/questions/strategicanalyses/${encodeURIComponent(String(strategicAnalysisId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param riskControlMatrixId 
     * @param isGeneralPage 
     * @param entityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public strategicAnalysesGetStrategicAnalysisById(id: string, riskControlMatrixId?: string, isGeneralPage?: boolean, entityId?: string, observe?: 'body', reportProgress?: boolean): Observable<StrategicAnalysisAC>;
    public strategicAnalysesGetStrategicAnalysisById(id: string, riskControlMatrixId?: string, isGeneralPage?: boolean, entityId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StrategicAnalysisAC>>;
    public strategicAnalysesGetStrategicAnalysisById(id: string, riskControlMatrixId?: string, isGeneralPage?: boolean, entityId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StrategicAnalysisAC>>;
    public strategicAnalysesGetStrategicAnalysisById(id: string, riskControlMatrixId?: string, isGeneralPage?: boolean, entityId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling strategicAnalysesGetStrategicAnalysisById.');
        }




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (riskControlMatrixId !== undefined && riskControlMatrixId !== null) {
            queryParameters = queryParameters.set('riskControlMatrixId', <any>riskControlMatrixId);
        }
        if (isGeneralPage !== undefined && isGeneralPage !== null) {
            queryParameters = queryParameters.set('isGeneralPage', <any>isGeneralPage);
        }
        if (entityId !== undefined && entityId !== null) {
            queryParameters = queryParameters.set('entityId', <any>entityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<StrategicAnalysisAC>('get',`${this.basePath}/api/StrategicAnalyses/${encodeURIComponent(String(id))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public strategicAnalysesGetStrategicAnalysisIdOfNextDraftStatus(observe?: 'body', reportProgress?: boolean): Observable<string>;
    public strategicAnalysesGetStrategicAnalysisIdOfNextDraftStatus(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public strategicAnalysesGetStrategicAnalysisIdOfNextDraftStatus(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public strategicAnalysesGetStrategicAnalysisIdOfNextDraftStatus(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<string>('get',`${this.basePath}/api/StrategicAnalyses/strategicanalysisId`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public strategicAnalysesGetUploadedFileNames(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public strategicAnalysesGetUploadedFileNames(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public strategicAnalysesGetUploadedFileNames(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public strategicAnalysesGetUploadedFileNames(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/api/StrategicAnalyses/uploadedFileName`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param page 
     * @param pageSize 
     * @param searchString 
     * @param strategicAnalysisId 
     * @param userId 
     * @param entityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public strategicAnalysesGetUserWiseResponse(page?: number, pageSize?: number, searchString?: string, strategicAnalysisId?: string, userId?: string, entityId?: string, observe?: 'body', reportProgress?: boolean): Observable<PaginationOfUserWiseResponseAC>;
    public strategicAnalysesGetUserWiseResponse(page?: number, pageSize?: number, searchString?: string, strategicAnalysisId?: string, userId?: string, entityId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PaginationOfUserWiseResponseAC>>;
    public strategicAnalysesGetUserWiseResponse(page?: number, pageSize?: number, searchString?: string, strategicAnalysisId?: string, userId?: string, entityId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PaginationOfUserWiseResponseAC>>;
    public strategicAnalysesGetUserWiseResponse(page?: number, pageSize?: number, searchString?: string, strategicAnalysisId?: string, userId?: string, entityId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {







        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (searchString !== undefined && searchString !== null) {
            queryParameters = queryParameters.set('searchString', <any>searchString);
        }
        if (strategicAnalysisId !== undefined && strategicAnalysisId !== null) {
            queryParameters = queryParameters.set('strategicAnalysisId', <any>strategicAnalysisId);
        }
        if (userId !== undefined && userId !== null) {
            queryParameters = queryParameters.set('userId', <any>userId);
        }
        if (entityId !== undefined && entityId !== null) {
            queryParameters = queryParameters.set('entityId', <any>entityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<PaginationOfUserWiseResponseAC>('get',`${this.basePath}/api/StrategicAnalyses/userWiseResponses/strategicAnalysisId/userId`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public strategicAnalysesSetStrategicAnalysis(id?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public strategicAnalysesSetStrategicAnalysis(id?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public strategicAnalysesSetStrategicAnalysis(id?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public strategicAnalysesSetStrategicAnalysis(id?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('put',`${this.basePath}/api/StrategicAnalyses/setStrategicAnalysis`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public strategicAnalysesUpdateQuestion(body: QuestionAC, observe?: 'body', reportProgress?: boolean): Observable<QuestionAC>;
    public strategicAnalysesUpdateQuestion(body: QuestionAC, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<QuestionAC>>;
    public strategicAnalysesUpdateQuestion(body: QuestionAC, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<QuestionAC>>;
    public strategicAnalysesUpdateQuestion(body: QuestionAC, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling strategicAnalysesUpdateQuestion.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<QuestionAC>('put',`${this.basePath}/api/StrategicAnalyses/questions`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param strategicAnalysisId 
     * @param userId 
     * @param entityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public strategicAnalysesUpdateStrategicAnalysisDoneInAuditableEntity(strategicAnalysisId: string, userId?: string, entityId?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public strategicAnalysesUpdateStrategicAnalysisDoneInAuditableEntity(strategicAnalysisId: string, userId?: string, entityId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public strategicAnalysesUpdateStrategicAnalysisDoneInAuditableEntity(strategicAnalysisId: string, userId?: string, entityId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public strategicAnalysesUpdateStrategicAnalysisDoneInAuditableEntity(strategicAnalysisId: string, userId?: string, entityId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (strategicAnalysisId === null || strategicAnalysisId === undefined) {
            throw new Error('Required parameter strategicAnalysisId was null or undefined when calling strategicAnalysesUpdateStrategicAnalysisDoneInAuditableEntity.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (userId !== undefined && userId !== null) {
            queryParameters = queryParameters.set('userId', <any>userId);
        }
        if (entityId !== undefined && entityId !== null) {
            queryParameters = queryParameters.set('entityId', <any>entityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('put',`${this.basePath}/api/StrategicAnalyses/auditableEntity/${encodeURIComponent(String(strategicAnalysisId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public strategicAnalysesUpdatedQuestionsOrder(body: Array<QuestionAC>, observe?: 'body', reportProgress?: boolean): Observable<QuestionAC>;
    public strategicAnalysesUpdatedQuestionsOrder(body: Array<QuestionAC>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<QuestionAC>>;
    public strategicAnalysesUpdatedQuestionsOrder(body: Array<QuestionAC>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<QuestionAC>>;
    public strategicAnalysesUpdatedQuestionsOrder(body: Array<QuestionAC>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling strategicAnalysesUpdatedQuestionsOrder.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<QuestionAC>('post',`${this.basePath}/api/StrategicAnalyses/updatedQuestions`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
