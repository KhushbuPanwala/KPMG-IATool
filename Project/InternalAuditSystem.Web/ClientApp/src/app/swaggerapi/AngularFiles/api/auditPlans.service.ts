/**
 * My Title
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AuditPlanAC } from '../model/auditPlanAC';
import { PaginationOfAuditPlanAC } from '../model/paginationOfAuditPlanAC';
import { PaginationOfAuditPlanDocumentAC } from '../model/paginationOfAuditPlanDocumentAC';
import { PaginationOfPlanProcessMappingAC } from '../model/paginationOfPlanProcessMappingAC';
import { PlanProcessMappingAC } from '../model/planProcessMappingAC';
import { ProblemDetails } from '../model/problemDetails';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class AuditPlansService {

    protected basePath = 'http://localhost:5000/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param body 
     * @param selectedEntityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public auditPlansAddAuditPlan(body: AuditPlanAC, selectedEntityId?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public auditPlansAddAuditPlan(body: AuditPlanAC, selectedEntityId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public auditPlansAddAuditPlan(body: AuditPlanAC, selectedEntityId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public auditPlansAddAuditPlan(body: AuditPlanAC, selectedEntityId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling auditPlansAddAuditPlan.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (selectedEntityId !== undefined && selectedEntityId !== null) {
            queryParameters = queryParameters.set('selectedEntityId', <any>selectedEntityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<string>('post',`${this.basePath}/api/AuditPlans`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param planId 
     * @param purpose 
     * @param path 
     * @param fileName 
     * @param documentFile 
     * @param isNewDocuemntUploaded 
     * @param selectedEntityId 
     * @param id 
     * @param createdDateTime 
     * @param createdDate 
     * @param updatedDateTime 
     * @param updatedDate 
     * @param createdBy 
     * @param updatedBy 
     * @param isDeleted 
     * @param selectedEntityId2 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public auditPlansAddAuditPlanDocument(planId?: string, purpose?: string, path?: string, fileName?: string, documentFile?: Blob, isNewDocuemntUploaded?: boolean, selectedEntityId?: string, id?: string, createdDateTime?: Date, createdDate?: string, updatedDateTime?: Date, updatedDate?: string, createdBy?: string, updatedBy?: string, isDeleted?: boolean, selectedEntityId2?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public auditPlansAddAuditPlanDocument(planId?: string, purpose?: string, path?: string, fileName?: string, documentFile?: Blob, isNewDocuemntUploaded?: boolean, selectedEntityId?: string, id?: string, createdDateTime?: Date, createdDate?: string, updatedDateTime?: Date, updatedDate?: string, createdBy?: string, updatedBy?: string, isDeleted?: boolean, selectedEntityId2?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public auditPlansAddAuditPlanDocument(planId?: string, purpose?: string, path?: string, fileName?: string, documentFile?: Blob, isNewDocuemntUploaded?: boolean, selectedEntityId?: string, id?: string, createdDateTime?: Date, createdDate?: string, updatedDateTime?: Date, updatedDate?: string, createdBy?: string, updatedBy?: string, isDeleted?: boolean, selectedEntityId2?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public auditPlansAddAuditPlanDocument(planId?: string, purpose?: string, path?: string, fileName?: string, documentFile?: Blob, isNewDocuemntUploaded?: boolean, selectedEntityId?: string, id?: string, createdDateTime?: Date, createdDate?: string, updatedDateTime?: Date, updatedDate?: string, createdBy?: string, updatedBy?: string, isDeleted?: boolean, selectedEntityId2?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

















        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (selectedEntityId2 !== undefined && selectedEntityId2 !== null) {
            queryParameters = queryParameters.set('selectedEntityId', <any>selectedEntityId2);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (planId !== undefined) {
            formParams = formParams.append('PlanId', <any>planId) as any || formParams;
        }
        if (purpose !== undefined) {
            formParams = formParams.append('Purpose', <any>purpose) as any || formParams;
        }
        if (path !== undefined) {
            formParams = formParams.append('Path', <any>path) as any || formParams;
        }
        if (fileName !== undefined) {
            formParams = formParams.append('FileName', <any>fileName) as any || formParams;
        }
        if (documentFile !== undefined) {
            formParams = formParams.append('DocumentFile', <any>documentFile) as any || formParams;
        }
        if (isNewDocuemntUploaded !== undefined) {
            formParams = formParams.append('IsNewDocuemntUploaded', <any>isNewDocuemntUploaded) as any || formParams;
        }
        if (selectedEntityId !== undefined) {
            formParams = formParams.append('SelectedEntityId', <any>selectedEntityId) as any || formParams;
        }
        if (id !== undefined) {
            formParams = formParams.append('Id', <any>id) as any || formParams;
        }
        if (createdDateTime !== undefined) {
            formParams = formParams.append('CreatedDateTime', <any>createdDateTime) as any || formParams;
        }
        if (createdDate !== undefined) {
            formParams = formParams.append('CreatedDate', <any>createdDate) as any || formParams;
        }
        if (updatedDateTime !== undefined) {
            formParams = formParams.append('UpdatedDateTime', <any>updatedDateTime) as any || formParams;
        }
        if (updatedDate !== undefined) {
            formParams = formParams.append('UpdatedDate', <any>updatedDate) as any || formParams;
        }
        if (createdBy !== undefined) {
            formParams = formParams.append('CreatedBy', <any>createdBy) as any || formParams;
        }
        if (updatedBy !== undefined) {
            formParams = formParams.append('UpdatedBy', <any>updatedBy) as any || formParams;
        }
        if (isDeleted !== undefined) {
            formParams = formParams.append('IsDeleted', <any>isDeleted) as any || formParams;
        }

        return this.httpClient.request<string>('post',`${this.basePath}/api/AuditPlans/add-plan-documents`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param selectedEntityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public auditPlansAddPlanProcess(body: PlanProcessMappingAC, selectedEntityId?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public auditPlansAddPlanProcess(body: PlanProcessMappingAC, selectedEntityId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public auditPlansAddPlanProcess(body: PlanProcessMappingAC, selectedEntityId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public auditPlansAddPlanProcess(body: PlanProcessMappingAC, selectedEntityId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling auditPlansAddPlanProcess.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (selectedEntityId !== undefined && selectedEntityId !== null) {
            queryParameters = queryParameters.set('selectedEntityId', <any>selectedEntityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<string>('post',`${this.basePath}/api/AuditPlans/add-plan-process`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param auditPlanId 
     * @param selectedEntityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public auditPlansCreateNewVersionOfAuditPlan(auditPlanId?: string, selectedEntityId?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public auditPlansCreateNewVersionOfAuditPlan(auditPlanId?: string, selectedEntityId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public auditPlansCreateNewVersionOfAuditPlan(auditPlanId?: string, selectedEntityId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public auditPlansCreateNewVersionOfAuditPlan(auditPlanId?: string, selectedEntityId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (auditPlanId !== undefined && auditPlanId !== null) {
            queryParameters = queryParameters.set('auditPlanId', <any>auditPlanId);
        }
        if (selectedEntityId !== undefined && selectedEntityId !== null) {
            queryParameters = queryParameters.set('selectedEntityId', <any>selectedEntityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('post',`${this.basePath}/api/AuditPlans/new-version`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param auditPlanId 
     * @param selectedEntityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public auditPlansDeleteAuditPlan(auditPlanId: string, selectedEntityId?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public auditPlansDeleteAuditPlan(auditPlanId: string, selectedEntityId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public auditPlansDeleteAuditPlan(auditPlanId: string, selectedEntityId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public auditPlansDeleteAuditPlan(auditPlanId: string, selectedEntityId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (auditPlanId === null || auditPlanId === undefined) {
            throw new Error('Required parameter auditPlanId was null or undefined when calling auditPlansDeleteAuditPlan.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (selectedEntityId !== undefined && selectedEntityId !== null) {
            queryParameters = queryParameters.set('selectedEntityId', <any>selectedEntityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/api/AuditPlans/delete-plan/${encodeURIComponent(String(auditPlanId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param planDocumentId 
     * @param selectedEntityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public auditPlansDeletePlanDocument(planDocumentId: string, selectedEntityId?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public auditPlansDeletePlanDocument(planDocumentId: string, selectedEntityId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public auditPlansDeletePlanDocument(planDocumentId: string, selectedEntityId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public auditPlansDeletePlanDocument(planDocumentId: string, selectedEntityId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (planDocumentId === null || planDocumentId === undefined) {
            throw new Error('Required parameter planDocumentId was null or undefined when calling auditPlansDeletePlanDocument.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (selectedEntityId !== undefined && selectedEntityId !== null) {
            queryParameters = queryParameters.set('selectedEntityId', <any>selectedEntityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/api/AuditPlans/delete-plan-document/${encodeURIComponent(String(planDocumentId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param planProcessId 
     * @param selectedEntityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public auditPlansDeletePlanProcess(planProcessId: string, selectedEntityId?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public auditPlansDeletePlanProcess(planProcessId: string, selectedEntityId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public auditPlansDeletePlanProcess(planProcessId: string, selectedEntityId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public auditPlansDeletePlanProcess(planProcessId: string, selectedEntityId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (planProcessId === null || planProcessId === undefined) {
            throw new Error('Required parameter planProcessId was null or undefined when calling auditPlansDeletePlanProcess.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (selectedEntityId !== undefined && selectedEntityId !== null) {
            queryParameters = queryParameters.set('selectedEntityId', <any>selectedEntityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/api/AuditPlans/delete-plan-process/${encodeURIComponent(String(planProcessId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param planDocumentId 
     * @param selectedEntityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public auditPlansDownloadPlanDocument(planDocumentId: string, selectedEntityId?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public auditPlansDownloadPlanDocument(planDocumentId: string, selectedEntityId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public auditPlansDownloadPlanDocument(planDocumentId: string, selectedEntityId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public auditPlansDownloadPlanDocument(planDocumentId: string, selectedEntityId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (planDocumentId === null || planDocumentId === undefined) {
            throw new Error('Required parameter planDocumentId was null or undefined when calling auditPlansDownloadPlanDocument.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (selectedEntityId !== undefined && selectedEntityId !== null) {
            queryParameters = queryParameters.set('selectedEntityId', <any>selectedEntityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<string>('get',`${this.basePath}/api/AuditPlans/download-file/${encodeURIComponent(String(planDocumentId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param entityId 
     * @param auditPlanId 
     * @param timeOffset 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public auditPlansExportAuditPlanProcess(entityId?: string, auditPlanId?: string, timeOffset?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public auditPlansExportAuditPlanProcess(entityId?: string, auditPlanId?: string, timeOffset?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public auditPlansExportAuditPlanProcess(entityId?: string, auditPlanId?: string, timeOffset?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public auditPlansExportAuditPlanProcess(entityId?: string, auditPlanId?: string, timeOffset?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (entityId !== undefined && entityId !== null) {
            queryParameters = queryParameters.set('entityId', <any>entityId);
        }
        if (auditPlanId !== undefined && auditPlanId !== null) {
            queryParameters = queryParameters.set('auditPlanId', <any>auditPlanId);
        }
        if (timeOffset !== undefined && timeOffset !== null) {
            queryParameters = queryParameters.set('timeOffset', <any>timeOffset);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/api/AuditPlans/exportAuditPlanProcess`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param entityId 
     * @param timeOffset 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public auditPlansExportAuditPlans(entityId?: string, timeOffset?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public auditPlansExportAuditPlans(entityId?: string, timeOffset?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public auditPlansExportAuditPlans(entityId?: string, timeOffset?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public auditPlansExportAuditPlans(entityId?: string, timeOffset?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (entityId !== undefined && entityId !== null) {
            queryParameters = queryParameters.set('entityId', <any>entityId);
        }
        if (timeOffset !== undefined && timeOffset !== null) {
            queryParameters = queryParameters.set('timeOffset', <any>timeOffset);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/api/AuditPlans/exportAuditPlans`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param entityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public auditPlansGetAllAuditPlansForDisplayInDropDown(entityId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<AuditPlanAC>>;
    public auditPlansGetAllAuditPlansForDisplayInDropDown(entityId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<AuditPlanAC>>>;
    public auditPlansGetAllAuditPlansForDisplayInDropDown(entityId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<AuditPlanAC>>>;
    public auditPlansGetAllAuditPlansForDisplayInDropDown(entityId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (entityId === null || entityId === undefined) {
            throw new Error('Required parameter entityId was null or undefined when calling auditPlansGetAllAuditPlansForDisplayInDropDown.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<AuditPlanAC>>('get',`${this.basePath}/api/AuditPlans/${encodeURIComponent(String(entityId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param pageIndex 
     * @param pageSize 
     * @param searchString 
     * @param selectedEntityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public auditPlansGetAllAuditPlansPageWiseAndSearchWise(pageIndex?: number, pageSize?: number, searchString?: string, selectedEntityId?: string, observe?: 'body', reportProgress?: boolean): Observable<PaginationOfAuditPlanAC>;
    public auditPlansGetAllAuditPlansPageWiseAndSearchWise(pageIndex?: number, pageSize?: number, searchString?: string, selectedEntityId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PaginationOfAuditPlanAC>>;
    public auditPlansGetAllAuditPlansPageWiseAndSearchWise(pageIndex?: number, pageSize?: number, searchString?: string, selectedEntityId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PaginationOfAuditPlanAC>>;
    public auditPlansGetAllAuditPlansPageWiseAndSearchWise(pageIndex?: number, pageSize?: number, searchString?: string, selectedEntityId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageIndex !== undefined && pageIndex !== null) {
            queryParameters = queryParameters.set('pageIndex', <any>pageIndex);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (searchString !== undefined && searchString !== null) {
            queryParameters = queryParameters.set('searchString', <any>searchString);
        }
        if (selectedEntityId !== undefined && selectedEntityId !== null) {
            queryParameters = queryParameters.set('selectedEntityId', <any>selectedEntityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<PaginationOfAuditPlanAC>('get',`${this.basePath}/api/AuditPlans`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param auditPlanId 
     * @param entityId 
     * @param sectionType 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public auditPlansGetAuditPlanDetailsById(auditPlanId: string, entityId?: string, sectionType?: number, observe?: 'body', reportProgress?: boolean): Observable<AuditPlanAC>;
    public auditPlansGetAuditPlanDetailsById(auditPlanId: string, entityId?: string, sectionType?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AuditPlanAC>>;
    public auditPlansGetAuditPlanDetailsById(auditPlanId: string, entityId?: string, sectionType?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AuditPlanAC>>;
    public auditPlansGetAuditPlanDetailsById(auditPlanId: string, entityId?: string, sectionType?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (auditPlanId === null || auditPlanId === undefined) {
            throw new Error('Required parameter auditPlanId was null or undefined when calling auditPlansGetAuditPlanDetailsById.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (entityId !== undefined && entityId !== null) {
            queryParameters = queryParameters.set('entityId', <any>entityId);
        }
        if (sectionType !== undefined && sectionType !== null) {
            queryParameters = queryParameters.set('sectionType', <any>sectionType);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<AuditPlanAC>('get',`${this.basePath}/api/AuditPlans/plan-data/${encodeURIComponent(String(auditPlanId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param entityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public auditPlansGetInitialDataForAuditPlanAdd(entityId: string, observe?: 'body', reportProgress?: boolean): Observable<AuditPlanAC>;
    public auditPlansGetInitialDataForAuditPlanAdd(entityId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AuditPlanAC>>;
    public auditPlansGetInitialDataForAuditPlanAdd(entityId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AuditPlanAC>>;
    public auditPlansGetInitialDataForAuditPlanAdd(entityId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (entityId === null || entityId === undefined) {
            throw new Error('Required parameter entityId was null or undefined when calling auditPlansGetInitialDataForAuditPlanAdd.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<AuditPlanAC>('get',`${this.basePath}/api/AuditPlans/initial-data/${encodeURIComponent(String(entityId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param auditPlanId 
     * @param pageIndex 
     * @param pageSize 
     * @param searchString 
     * @param selectedEntityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public auditPlansGetPlanDocumentsPageWiseAndSearchWiseByPlanId(auditPlanId: string, pageIndex?: number, pageSize?: number, searchString?: string, selectedEntityId?: string, observe?: 'body', reportProgress?: boolean): Observable<PaginationOfAuditPlanDocumentAC>;
    public auditPlansGetPlanDocumentsPageWiseAndSearchWiseByPlanId(auditPlanId: string, pageIndex?: number, pageSize?: number, searchString?: string, selectedEntityId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PaginationOfAuditPlanDocumentAC>>;
    public auditPlansGetPlanDocumentsPageWiseAndSearchWiseByPlanId(auditPlanId: string, pageIndex?: number, pageSize?: number, searchString?: string, selectedEntityId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PaginationOfAuditPlanDocumentAC>>;
    public auditPlansGetPlanDocumentsPageWiseAndSearchWiseByPlanId(auditPlanId: string, pageIndex?: number, pageSize?: number, searchString?: string, selectedEntityId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (auditPlanId === null || auditPlanId === undefined) {
            throw new Error('Required parameter auditPlanId was null or undefined when calling auditPlansGetPlanDocumentsPageWiseAndSearchWiseByPlanId.');
        }





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageIndex !== undefined && pageIndex !== null) {
            queryParameters = queryParameters.set('pageIndex', <any>pageIndex);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (searchString !== undefined && searchString !== null) {
            queryParameters = queryParameters.set('searchString', <any>searchString);
        }
        if (selectedEntityId !== undefined && selectedEntityId !== null) {
            queryParameters = queryParameters.set('selectedEntityId', <any>selectedEntityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<PaginationOfAuditPlanDocumentAC>('get',`${this.basePath}/api/AuditPlans/get-plan-documents/${encodeURIComponent(String(auditPlanId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param auditPlanId 
     * @param pageIndex 
     * @param pageSize 
     * @param searchString 
     * @param selectedEntityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public auditPlansGetPlanProcessesPageWiseAndSearchWiseByPlanId(auditPlanId: string, pageIndex?: number, pageSize?: number, searchString?: string, selectedEntityId?: string, observe?: 'body', reportProgress?: boolean): Observable<PaginationOfPlanProcessMappingAC>;
    public auditPlansGetPlanProcessesPageWiseAndSearchWiseByPlanId(auditPlanId: string, pageIndex?: number, pageSize?: number, searchString?: string, selectedEntityId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PaginationOfPlanProcessMappingAC>>;
    public auditPlansGetPlanProcessesPageWiseAndSearchWiseByPlanId(auditPlanId: string, pageIndex?: number, pageSize?: number, searchString?: string, selectedEntityId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PaginationOfPlanProcessMappingAC>>;
    public auditPlansGetPlanProcessesPageWiseAndSearchWiseByPlanId(auditPlanId: string, pageIndex?: number, pageSize?: number, searchString?: string, selectedEntityId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (auditPlanId === null || auditPlanId === undefined) {
            throw new Error('Required parameter auditPlanId was null or undefined when calling auditPlansGetPlanProcessesPageWiseAndSearchWiseByPlanId.');
        }





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (pageIndex !== undefined && pageIndex !== null) {
            queryParameters = queryParameters.set('pageIndex', <any>pageIndex);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (searchString !== undefined && searchString !== null) {
            queryParameters = queryParameters.set('searchString', <any>searchString);
        }
        if (selectedEntityId !== undefined && selectedEntityId !== null) {
            queryParameters = queryParameters.set('selectedEntityId', <any>selectedEntityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<PaginationOfPlanProcessMappingAC>('get',`${this.basePath}/api/AuditPlans/get-plan-process/${encodeURIComponent(String(auditPlanId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param selectedEntityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public auditPlansUpdateAuditPlan(body: AuditPlanAC, selectedEntityId?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public auditPlansUpdateAuditPlan(body: AuditPlanAC, selectedEntityId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public auditPlansUpdateAuditPlan(body: AuditPlanAC, selectedEntityId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public auditPlansUpdateAuditPlan(body: AuditPlanAC, selectedEntityId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling auditPlansUpdateAuditPlan.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (selectedEntityId !== undefined && selectedEntityId !== null) {
            queryParameters = queryParameters.set('selectedEntityId', <any>selectedEntityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<string>('put',`${this.basePath}/api/AuditPlans`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param selectedEntityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public auditPlansUpdateAuditPlanStatus(body: AuditPlanAC, selectedEntityId?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public auditPlansUpdateAuditPlanStatus(body: AuditPlanAC, selectedEntityId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public auditPlansUpdateAuditPlanStatus(body: AuditPlanAC, selectedEntityId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public auditPlansUpdateAuditPlanStatus(body: AuditPlanAC, selectedEntityId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling auditPlansUpdateAuditPlanStatus.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (selectedEntityId !== undefined && selectedEntityId !== null) {
            queryParameters = queryParameters.set('selectedEntityId', <any>selectedEntityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/api/AuditPlans/update-status`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param selectedEntityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public auditPlansUpdatePlanProcess(body: PlanProcessMappingAC, selectedEntityId?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public auditPlansUpdatePlanProcess(body: PlanProcessMappingAC, selectedEntityId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public auditPlansUpdatePlanProcess(body: PlanProcessMappingAC, selectedEntityId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public auditPlansUpdatePlanProcess(body: PlanProcessMappingAC, selectedEntityId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling auditPlansUpdatePlanProcess.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (selectedEntityId !== undefined && selectedEntityId !== null) {
            queryParameters = queryParameters.set('selectedEntityId', <any>selectedEntityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/api/AuditPlans/update-plan-process`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
