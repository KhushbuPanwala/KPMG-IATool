/**
 * My Title
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { PaginationOfRiskControlMatrixAC } from '../model/paginationOfRiskControlMatrixAC';
import { ProblemDetails } from '../model/problemDetails';
import { RCMUploadAC } from '../model/rCMUploadAC';
import { RiskControlMatrixAC } from '../model/riskControlMatrixAC';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class RiskControlMatrixesService {

    protected basePath = 'http://localhost:5000/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param body 
     * @param selectedEntityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public riskControlMatrixesAddRiskControlMatrix(body: RiskControlMatrixAC, selectedEntityId?: string, observe?: 'body', reportProgress?: boolean): Observable<RiskControlMatrixAC>;
    public riskControlMatrixesAddRiskControlMatrix(body: RiskControlMatrixAC, selectedEntityId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RiskControlMatrixAC>>;
    public riskControlMatrixesAddRiskControlMatrix(body: RiskControlMatrixAC, selectedEntityId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RiskControlMatrixAC>>;
    public riskControlMatrixesAddRiskControlMatrix(body: RiskControlMatrixAC, selectedEntityId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling riskControlMatrixesAddRiskControlMatrix.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (selectedEntityId !== undefined && selectedEntityId !== null) {
            queryParameters = queryParameters.set('selectedEntityId', <any>selectedEntityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<RiskControlMatrixAC>('post',`${this.basePath}/api/RiskControlMatrixes`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param selectedEntityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public riskControlMatrixesDeleteRcm(id: string, selectedEntityId?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public riskControlMatrixesDeleteRcm(id: string, selectedEntityId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public riskControlMatrixesDeleteRcm(id: string, selectedEntityId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public riskControlMatrixesDeleteRcm(id: string, selectedEntityId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling riskControlMatrixesDeleteRcm.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (selectedEntityId !== undefined && selectedEntityId !== null) {
            queryParameters = queryParameters.set('selectedEntityId', <any>selectedEntityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/api/RiskControlMatrixes/${encodeURIComponent(String(id))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param entityId 
     * @param timeOffset 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public riskControlMatrixesExportRcmMain(entityId?: string, timeOffset?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public riskControlMatrixesExportRcmMain(entityId?: string, timeOffset?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public riskControlMatrixesExportRcmMain(entityId?: string, timeOffset?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public riskControlMatrixesExportRcmMain(entityId?: string, timeOffset?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (entityId !== undefined && entityId !== null) {
            queryParameters = queryParameters.set('entityId', <any>entityId);
        }
        if (timeOffset !== undefined && timeOffset !== null) {
            queryParameters = queryParameters.set('timeOffset', <any>timeOffset);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/api/RiskControlMatrixes/exportRiskControlMatrixes`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param workProgramId 
     * @param pageIndex 
     * @param pageSize 
     * @param searchString 
     * @param selectedEntityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public riskControlMatrixesGetRCMListForWorkProgram(workProgramId?: string, pageIndex?: number, pageSize?: number, searchString?: string, selectedEntityId?: string, observe?: 'body', reportProgress?: boolean): Observable<PaginationOfRiskControlMatrixAC>;
    public riskControlMatrixesGetRCMListForWorkProgram(workProgramId?: string, pageIndex?: number, pageSize?: number, searchString?: string, selectedEntityId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PaginationOfRiskControlMatrixAC>>;
    public riskControlMatrixesGetRCMListForWorkProgram(workProgramId?: string, pageIndex?: number, pageSize?: number, searchString?: string, selectedEntityId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PaginationOfRiskControlMatrixAC>>;
    public riskControlMatrixesGetRCMListForWorkProgram(workProgramId?: string, pageIndex?: number, pageSize?: number, searchString?: string, selectedEntityId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (workProgramId !== undefined && workProgramId !== null) {
            queryParameters = queryParameters.set('workProgramId', <any>workProgramId);
        }
        if (pageIndex !== undefined && pageIndex !== null) {
            queryParameters = queryParameters.set('pageIndex', <any>pageIndex);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (searchString !== undefined && searchString !== null) {
            queryParameters = queryParameters.set('searchString', <any>searchString);
        }
        if (selectedEntityId !== undefined && selectedEntityId !== null) {
            queryParameters = queryParameters.set('selectedEntityId', <any>selectedEntityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<PaginationOfRiskControlMatrixAC>('get',`${this.basePath}/api/RiskControlMatrixes`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param selectedEntityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public riskControlMatrixesGetRCMUploadDetail(selectedEntityId?: string, observe?: 'body', reportProgress?: boolean): Observable<RCMUploadAC>;
    public riskControlMatrixesGetRCMUploadDetail(selectedEntityId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RCMUploadAC>>;
    public riskControlMatrixesGetRCMUploadDetail(selectedEntityId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RCMUploadAC>>;
    public riskControlMatrixesGetRCMUploadDetail(selectedEntityId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (selectedEntityId !== undefined && selectedEntityId !== null) {
            queryParameters = queryParameters.set('selectedEntityId', <any>selectedEntityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<RCMUploadAC>('get',`${this.basePath}/api/RiskControlMatrixes/bulkUploadData`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param selectedEntityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public riskControlMatrixesGetRiskControlMatrixDetailsById(id: string, selectedEntityId?: string, observe?: 'body', reportProgress?: boolean): Observable<RiskControlMatrixAC>;
    public riskControlMatrixesGetRiskControlMatrixDetailsById(id: string, selectedEntityId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RiskControlMatrixAC>>;
    public riskControlMatrixesGetRiskControlMatrixDetailsById(id: string, selectedEntityId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RiskControlMatrixAC>>;
    public riskControlMatrixesGetRiskControlMatrixDetailsById(id: string, selectedEntityId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling riskControlMatrixesGetRiskControlMatrixDetailsById.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (selectedEntityId !== undefined && selectedEntityId !== null) {
            queryParameters = queryParameters.set('selectedEntityId', <any>selectedEntityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<RiskControlMatrixAC>('get',`${this.basePath}/api/RiskControlMatrixes/${encodeURIComponent(String(id))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param selectedEntityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public riskControlMatrixesUpdateRiskControlMatrix(body: Array<RiskControlMatrixAC>, selectedEntityId?: string, observe?: 'body', reportProgress?: boolean): Observable<RiskControlMatrixAC>;
    public riskControlMatrixesUpdateRiskControlMatrix(body: Array<RiskControlMatrixAC>, selectedEntityId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RiskControlMatrixAC>>;
    public riskControlMatrixesUpdateRiskControlMatrix(body: Array<RiskControlMatrixAC>, selectedEntityId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RiskControlMatrixAC>>;
    public riskControlMatrixesUpdateRiskControlMatrix(body: Array<RiskControlMatrixAC>, selectedEntityId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling riskControlMatrixesUpdateRiskControlMatrix.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (selectedEntityId !== undefined && selectedEntityId !== null) {
            queryParameters = queryParameters.set('selectedEntityId', <any>selectedEntityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<RiskControlMatrixAC>('put',`${this.basePath}/api/RiskControlMatrixes`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
