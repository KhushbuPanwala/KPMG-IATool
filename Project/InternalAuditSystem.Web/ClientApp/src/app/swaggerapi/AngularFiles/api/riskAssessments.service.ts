/**
 * My Title
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { PaginationOfRiskAssessmentAC } from '../model/paginationOfRiskAssessmentAC';
import { ProblemDetails } from '../model/problemDetails';
import { RiskAssessmentAC } from '../model/riskAssessmentAC';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class RiskAssessmentsService {

    protected basePath = 'http://localhost:5000/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public riskAssessmentsDeleteRiskAssessmentAync(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public riskAssessmentsDeleteRiskAssessmentAync(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public riskAssessmentsDeleteRiskAssessmentAync(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public riskAssessmentsDeleteRiskAssessmentAync(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling riskAssessmentsDeleteRiskAssessmentAync.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/api/RiskAssessments/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public riskAssessmentsDeleteRiskAssessmentDocumment(id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public riskAssessmentsDeleteRiskAssessmentDocumment(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public riskAssessmentsDeleteRiskAssessmentDocumment(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public riskAssessmentsDeleteRiskAssessmentDocumment(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling riskAssessmentsDeleteRiskAssessmentDocumment.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/api/RiskAssessments/file/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public riskAssessmentsGetRiskAssessmentDetailsById(id: string, observe?: 'body', reportProgress?: boolean): Observable<RiskAssessmentAC>;
    public riskAssessmentsGetRiskAssessmentDetailsById(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<RiskAssessmentAC>>;
    public riskAssessmentsGetRiskAssessmentDetailsById(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<RiskAssessmentAC>>;
    public riskAssessmentsGetRiskAssessmentDetailsById(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling riskAssessmentsGetRiskAssessmentDetailsById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<RiskAssessmentAC>('get',`${this.basePath}/api/RiskAssessments/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public riskAssessmentsGetRiskAssessmentDocummentDownloadUrl(id: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public riskAssessmentsGetRiskAssessmentDocummentDownloadUrl(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public riskAssessmentsGetRiskAssessmentDocummentDownloadUrl(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public riskAssessmentsGetRiskAssessmentDocummentDownloadUrl(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling riskAssessmentsGetRiskAssessmentDocummentDownloadUrl.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<string>('get',`${this.basePath}/api/RiskAssessments/file/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param entityId 
     * @param pageIndex 
     * @param pageSize 
     * @param searchString 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public riskAssessmentsGetRiskAssessmentList(entityId?: string, pageIndex?: number, pageSize?: number, searchString?: string, observe?: 'body', reportProgress?: boolean): Observable<PaginationOfRiskAssessmentAC>;
    public riskAssessmentsGetRiskAssessmentList(entityId?: string, pageIndex?: number, pageSize?: number, searchString?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<PaginationOfRiskAssessmentAC>>;
    public riskAssessmentsGetRiskAssessmentList(entityId?: string, pageIndex?: number, pageSize?: number, searchString?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<PaginationOfRiskAssessmentAC>>;
    public riskAssessmentsGetRiskAssessmentList(entityId?: string, pageIndex?: number, pageSize?: number, searchString?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (entityId !== undefined && entityId !== null) {
            queryParameters = queryParameters.set('entityId', <any>entityId);
        }
        if (pageIndex !== undefined && pageIndex !== null) {
            queryParameters = queryParameters.set('pageIndex', <any>pageIndex);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters = queryParameters.set('pageSize', <any>pageSize);
        }
        if (searchString !== undefined && searchString !== null) {
            queryParameters = queryParameters.set('searchString', <any>searchString);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<PaginationOfRiskAssessmentAC>('get',`${this.basePath}/api/RiskAssessments`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
