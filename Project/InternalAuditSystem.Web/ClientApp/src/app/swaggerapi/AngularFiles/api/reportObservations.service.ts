/**
 * My Title
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AuditPlanAC } from '../model/auditPlanAC';
import { ProblemDetails } from '../model/problemDetails';
import { ReportDetailAC } from '../model/reportDetailAC';
import { ReportObservationAC } from '../model/reportObservationAC';
import { ReportObservationsDocumentAC } from '../model/reportObservationsDocumentAC';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ReportObservationsService {

    protected basePath = 'http://localhost:5000/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param tableId 
     * @param reportObservationId 
     * @param selectedEntityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public reportObservationsAddColumnInTable(tableId?: string, reportObservationId?: string, selectedEntityId?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public reportObservationsAddColumnInTable(tableId?: string, reportObservationId?: string, selectedEntityId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public reportObservationsAddColumnInTable(tableId?: string, reportObservationId?: string, selectedEntityId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public reportObservationsAddColumnInTable(tableId?: string, reportObservationId?: string, selectedEntityId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (tableId !== undefined && tableId !== null) {
            queryParameters = queryParameters.set('tableId', <any>tableId);
        }
        if (reportObservationId !== undefined && reportObservationId !== null) {
            queryParameters = queryParameters.set('reportObservationId', <any>reportObservationId);
        }
        if (selectedEntityId !== undefined && selectedEntityId !== null) {
            queryParameters = queryParameters.set('selectedEntityId', <any>selectedEntityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<string>('put',`${this.basePath}/api/ReportObservations/json-documents`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param selectedEntityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public reportObservationsAddObservations(body: ReportDetailAC, selectedEntityId?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public reportObservationsAddObservations(body: ReportDetailAC, selectedEntityId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public reportObservationsAddObservations(body: ReportDetailAC, selectedEntityId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public reportObservationsAddObservations(body: ReportDetailAC, selectedEntityId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling reportObservationsAddObservations.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (selectedEntityId !== undefined && selectedEntityId !== null) {
            queryParameters = queryParameters.set('selectedEntityId', <any>selectedEntityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/api/ReportObservations/addObservations`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param reportObservationId 
     * @param files 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public reportObservationsAddReportObservationDocuments(reportObservationId?: string, files?: Blob, observe?: 'body', reportProgress?: boolean): Observable<ReportObservationsDocumentAC>;
    public reportObservationsAddReportObservationDocuments(reportObservationId?: string, files?: Blob, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ReportObservationsDocumentAC>>;
    public reportObservationsAddReportObservationDocuments(reportObservationId?: string, files?: Blob, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ReportObservationsDocumentAC>>;
    public reportObservationsAddReportObservationDocuments(reportObservationId?: string, files?: Blob, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): void; };
        let useForm = false;
        let convertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        }

        if (reportObservationId !== undefined) {
            formParams = formParams.append('ReportObservationId', <any>reportObservationId) as any || formParams;
        }
        if (files !== undefined) {
            formParams = formParams.append('Files', <any>files) as any || formParams;
        }

        return this.httpClient.request<ReportObservationsDocumentAC>('post',`${this.basePath}/api/ReportObservations/add-report-Observation-documents`,
            {
                body: convertFormParamsToString ? formParams.toString() : formParams,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param tableId 
     * @param reportObservationId 
     * @param selectedEntityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public reportObservationsAddRow(tableId?: string, reportObservationId?: string, selectedEntityId?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public reportObservationsAddRow(tableId?: string, reportObservationId?: string, selectedEntityId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public reportObservationsAddRow(tableId?: string, reportObservationId?: string, selectedEntityId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public reportObservationsAddRow(tableId?: string, reportObservationId?: string, selectedEntityId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (tableId !== undefined && tableId !== null) {
            queryParameters = queryParameters.set('tableId', <any>tableId);
        }
        if (reportObservationId !== undefined && reportObservationId !== null) {
            queryParameters = queryParameters.set('reportObservationId', <any>reportObservationId);
        }
        if (selectedEntityId !== undefined && selectedEntityId !== null) {
            queryParameters = queryParameters.set('selectedEntityId', <any>selectedEntityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<string>('put',`${this.basePath}/api/ReportObservations/json-documents/rows`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param reportObservationId 
     * @param tableId 
     * @param columnPosition 
     * @param selectedEntityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public reportObservationsDeleteColumn(reportObservationId?: string, tableId?: string, columnPosition?: number, selectedEntityId?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public reportObservationsDeleteColumn(reportObservationId?: string, tableId?: string, columnPosition?: number, selectedEntityId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public reportObservationsDeleteColumn(reportObservationId?: string, tableId?: string, columnPosition?: number, selectedEntityId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public reportObservationsDeleteColumn(reportObservationId?: string, tableId?: string, columnPosition?: number, selectedEntityId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (reportObservationId !== undefined && reportObservationId !== null) {
            queryParameters = queryParameters.set('reportObservationId', <any>reportObservationId);
        }
        if (tableId !== undefined && tableId !== null) {
            queryParameters = queryParameters.set('tableId', <any>tableId);
        }
        if (columnPosition !== undefined && columnPosition !== null) {
            queryParameters = queryParameters.set('columnPosition', <any>columnPosition);
        }
        if (selectedEntityId !== undefined && selectedEntityId !== null) {
            queryParameters = queryParameters.set('selectedEntityId', <any>selectedEntityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<string>('put',`${this.basePath}/api/ReportObservations/json-documents/columns/id`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param reportObservationId 
     * @param selectedEntityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public reportObservationsDeleteReportObservation(id: string, reportObservationId?: string, selectedEntityId?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public reportObservationsDeleteReportObservation(id: string, reportObservationId?: string, selectedEntityId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public reportObservationsDeleteReportObservation(id: string, reportObservationId?: string, selectedEntityId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public reportObservationsDeleteReportObservation(id: string, reportObservationId?: string, selectedEntityId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling reportObservationsDeleteReportObservation.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (reportObservationId !== undefined && reportObservationId !== null) {
            queryParameters = queryParameters.set('reportObservationId', <any>reportObservationId);
        }
        if (selectedEntityId !== undefined && selectedEntityId !== null) {
            queryParameters = queryParameters.set('selectedEntityId', <any>selectedEntityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/api/ReportObservations/${encodeURIComponent(String(id))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param reportObservationDocumentId 
     * @param selectedEntityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public reportObservationsDeleteReportObservationDocument(reportObservationDocumentId: string, selectedEntityId?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public reportObservationsDeleteReportObservationDocument(reportObservationDocumentId: string, selectedEntityId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public reportObservationsDeleteReportObservationDocument(reportObservationDocumentId: string, selectedEntityId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public reportObservationsDeleteReportObservationDocument(reportObservationDocumentId: string, selectedEntityId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (reportObservationDocumentId === null || reportObservationDocumentId === undefined) {
            throw new Error('Required parameter reportObservationDocumentId was null or undefined when calling reportObservationsDeleteReportObservationDocument.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (selectedEntityId !== undefined && selectedEntityId !== null) {
            queryParameters = queryParameters.set('selectedEntityId', <any>selectedEntityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/api/ReportObservations/delete-report-observation-document/${encodeURIComponent(String(reportObservationDocumentId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param reportObservationId 
     * @param tableId 
     * @param rowId 
     * @param selectedEntityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public reportObservationsDeleteRow(reportObservationId?: string, tableId?: string, rowId?: string, selectedEntityId?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public reportObservationsDeleteRow(reportObservationId?: string, tableId?: string, rowId?: string, selectedEntityId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public reportObservationsDeleteRow(reportObservationId?: string, tableId?: string, rowId?: string, selectedEntityId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public reportObservationsDeleteRow(reportObservationId?: string, tableId?: string, rowId?: string, selectedEntityId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (reportObservationId !== undefined && reportObservationId !== null) {
            queryParameters = queryParameters.set('reportObservationId', <any>reportObservationId);
        }
        if (tableId !== undefined && tableId !== null) {
            queryParameters = queryParameters.set('tableId', <any>tableId);
        }
        if (rowId !== undefined && rowId !== null) {
            queryParameters = queryParameters.set('rowId', <any>rowId);
        }
        if (selectedEntityId !== undefined && selectedEntityId !== null) {
            queryParameters = queryParameters.set('selectedEntityId', <any>selectedEntityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<string>('put',`${this.basePath}/api/ReportObservations/json-documents/rows/id`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observationDocumentId 
     * @param selectedEntityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public reportObservationsDownloadReportObservationDocument(observationDocumentId: string, selectedEntityId?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public reportObservationsDownloadReportObservationDocument(observationDocumentId: string, selectedEntityId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public reportObservationsDownloadReportObservationDocument(observationDocumentId: string, selectedEntityId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public reportObservationsDownloadReportObservationDocument(observationDocumentId: string, selectedEntityId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (observationDocumentId === null || observationDocumentId === undefined) {
            throw new Error('Required parameter observationDocumentId was null or undefined when calling reportObservationsDownloadReportObservationDocument.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (selectedEntityId !== undefined && selectedEntityId !== null) {
            queryParameters = queryParameters.set('selectedEntityId', <any>selectedEntityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<string>('get',`${this.basePath}/api/ReportObservations/download-file/${encodeURIComponent(String(observationDocumentId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param entityId 
     * @param timeOffset 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public reportObservationsGenerateReportObservationPPT(id?: string, entityId?: string, timeOffset?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public reportObservationsGenerateReportObservationPPT(id?: string, entityId?: string, timeOffset?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public reportObservationsGenerateReportObservationPPT(id?: string, entityId?: string, timeOffset?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public reportObservationsGenerateReportObservationPPT(id?: string, entityId?: string, timeOffset?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }
        if (entityId !== undefined && entityId !== null) {
            queryParameters = queryParameters.set('entityId', <any>entityId);
        }
        if (timeOffset !== undefined && timeOffset !== null) {
            queryParameters = queryParameters.set('timeOffset', <any>timeOffset);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/api/ReportObservations/generateReportObservationPPT`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param planId 
     * @param subProcessId 
     * @param selectedEntityId 
     * @param reportId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public reportObservationsGetAllObservations(planId?: string, subProcessId?: string, selectedEntityId?: string, reportId?: string, observe?: 'body', reportProgress?: boolean): Observable<ReportDetailAC>;
    public reportObservationsGetAllObservations(planId?: string, subProcessId?: string, selectedEntityId?: string, reportId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ReportDetailAC>>;
    public reportObservationsGetAllObservations(planId?: string, subProcessId?: string, selectedEntityId?: string, reportId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ReportDetailAC>>;
    public reportObservationsGetAllObservations(planId?: string, subProcessId?: string, selectedEntityId?: string, reportId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (planId !== undefined && planId !== null) {
            queryParameters = queryParameters.set('planId', <any>planId);
        }
        if (subProcessId !== undefined && subProcessId !== null) {
            queryParameters = queryParameters.set('subProcessId', <any>subProcessId);
        }
        if (selectedEntityId !== undefined && selectedEntityId !== null) {
            queryParameters = queryParameters.set('selectedEntityId', <any>selectedEntityId);
        }
        if (reportId !== undefined && reportId !== null) {
            queryParameters = queryParameters.set('reportId', <any>reportId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ReportDetailAC>('get',`${this.basePath}/api/ReportObservations`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param selectedEntityId 
     * @param reportId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public reportObservationsGetPlanProcesessInitData(selectedEntityId: string, reportId?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<AuditPlanAC>>;
    public reportObservationsGetPlanProcesessInitData(selectedEntityId: string, reportId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<AuditPlanAC>>>;
    public reportObservationsGetPlanProcesessInitData(selectedEntityId: string, reportId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<AuditPlanAC>>>;
    public reportObservationsGetPlanProcesessInitData(selectedEntityId: string, reportId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (selectedEntityId === null || selectedEntityId === undefined) {
            throw new Error('Required parameter selectedEntityId was null or undefined when calling reportObservationsGetPlanProcesessInitData.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (reportId !== undefined && reportId !== null) {
            queryParameters = queryParameters.set('reportId', <any>reportId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<AuditPlanAC>>('get',`${this.basePath}/api/ReportObservations/getPlanProcesess/${encodeURIComponent(String(selectedEntityId))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param selectedEntityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public reportObservationsGetReportObservationTable(id?: string, selectedEntityId?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public reportObservationsGetReportObservationTable(id?: string, selectedEntityId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public reportObservationsGetReportObservationTable(id?: string, selectedEntityId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public reportObservationsGetReportObservationTable(id?: string, selectedEntityId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }
        if (selectedEntityId !== undefined && selectedEntityId !== null) {
            queryParameters = queryParameters.set('selectedEntityId', <any>selectedEntityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<string>('get',`${this.basePath}/api/ReportObservations/json-documents`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param reportObservationId 
     * @param selectedEntityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public reportObservationsGetReportObservations(id: string, reportObservationId?: string, selectedEntityId?: string, observe?: 'body', reportProgress?: boolean): Observable<ReportDetailAC>;
    public reportObservationsGetReportObservations(id: string, reportObservationId?: string, selectedEntityId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ReportDetailAC>>;
    public reportObservationsGetReportObservations(id: string, reportObservationId?: string, selectedEntityId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ReportDetailAC>>;
    public reportObservationsGetReportObservations(id: string, reportObservationId?: string, selectedEntityId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling reportObservationsGetReportObservations.');
        }



        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (reportObservationId !== undefined && reportObservationId !== null) {
            queryParameters = queryParameters.set('reportObservationId', <any>reportObservationId);
        }
        if (selectedEntityId !== undefined && selectedEntityId !== null) {
            queryParameters = queryParameters.set('selectedEntityId', <any>selectedEntityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ReportDetailAC>('get',`${this.basePath}/api/ReportObservations/getReportObservation/${encodeURIComponent(String(id))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param jsonDocument 
     * @param reportObservationId 
     * @param tableId 
     * @param selectedEntityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public reportObservationsUpdateJsonDocument(jsonDocument?: string, reportObservationId?: string, tableId?: string, selectedEntityId?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public reportObservationsUpdateJsonDocument(jsonDocument?: string, reportObservationId?: string, tableId?: string, selectedEntityId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public reportObservationsUpdateJsonDocument(jsonDocument?: string, reportObservationId?: string, tableId?: string, selectedEntityId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public reportObservationsUpdateJsonDocument(jsonDocument?: string, reportObservationId?: string, tableId?: string, selectedEntityId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {





        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (jsonDocument !== undefined && jsonDocument !== null) {
            queryParameters = queryParameters.set('jsonDocument', <any>jsonDocument);
        }
        if (reportObservationId !== undefined && reportObservationId !== null) {
            queryParameters = queryParameters.set('reportObservationId', <any>reportObservationId);
        }
        if (tableId !== undefined && tableId !== null) {
            queryParameters = queryParameters.set('tableId', <any>tableId);
        }
        if (selectedEntityId !== undefined && selectedEntityId !== null) {
            queryParameters = queryParameters.set('selectedEntityId', <any>selectedEntityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<string>('put',`${this.basePath}/api/ReportObservations/json-documents/update`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param selectedEntityId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public reportObservationsUpdateReportObservation(body: ReportDetailAC, selectedEntityId?: string, observe?: 'body', reportProgress?: boolean): Observable<ReportObservationAC>;
    public reportObservationsUpdateReportObservation(body: ReportDetailAC, selectedEntityId?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ReportObservationAC>>;
    public reportObservationsUpdateReportObservation(body: ReportDetailAC, selectedEntityId?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ReportObservationAC>>;
    public reportObservationsUpdateReportObservation(body: ReportDetailAC, selectedEntityId?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling reportObservationsUpdateReportObservation.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (selectedEntityId !== undefined && selectedEntityId !== null) {
            queryParameters = queryParameters.set('selectedEntityId', <any>selectedEntityId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ReportObservationAC>('put',`${this.basePath}/api/ReportObservations`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
